l = 0b110
O = 0.015625
define :Ol do |lO, ll, lOO|
  lO = lO * O
  lOl = lO + (O * ll)
  sample :loop_amen_full, rate: lOO, start: lO, finish: lOl, beat_stretch: 1, amp: 0b10
  sleep (O)*ll
end
define :llO do |lO,ll|
  lOO = lO
  ll.times do
    lOO.each { |lll| Ol(lll[0],lll[1],lll[0b10])}
  end
end
lOOO = [[0b111,1],[0b110,1],[0b1010,1],[0b1011,1],[0,0b10],[0b101100,0b10],[0b100,0b10],[0b111010,0b100]]
lOOl = [0b100,0b100,0b110,1,0,1,0,0b10,0b11,0b110,1,0,0b100,0b100,0b110,1,0,1,0,0b10,0b11,0b110,1,0,0b100,0b100,0b110,1,0,1,0,0b100,0b101,
        0b110,1,0,0b10,0b11,0b110,1,0,1,0,0b111,0b110]
lOlO = [[0b11111,0b101],[0,0b101],[0b101001,0b100],[0b11111,0b10],[0b111,0b11],[0b10,0b11],[0b11011,0b110],[0b100000,0b10],[0b11010,0b110],
        [10,0b101],[0b100111,0b101],[0b100,0b100],[10,0b11],[0b111,0b110],[0b100001,0b110],[0b11,0b100]]
lOll = [[1,1,0,0b11,0b11,1,0b111,0b111,0,0b10],[0b1101,0b100,0b100,0b110,0b11,0b11,0b1001,0b1000,1,0b10],
        [0b1000,1,0b110,1,0b1000,1,0b110,0b10],[0b1000,1,0b110,0b1110,0b1000,1,0b110,0b10],[1,0b11,0b11,1,0b111,0b111,1,0b11,0b11,1,0b10],
        [1,0b11,0b11,1,0b100,0b100,1,0b11,0b11,1,0b10],[1,0b11,0b11,1,0b101,0b101,1,0b11,0b11,1,0b10],
        [1,0b11,0b11,1,0b101,0b101,1,0b100,0b100,1,0b10],[0,0b11,0b11,0,0b111,0b111,0,0b11,0b11,0,0b10],
        [0,0b11,0b11,0,0b100,0b100,0,0b11,0b11,0,0b10],[0,0b11,0b11,0,0b101,0b101,0,0b11,0b11,0,0b10],
        [0,0b11,0b11,0,0b101,0b101,0,0b100,0b100,0,0b10],[0,0,0,0b101,0b101,0,0,0,0b10],[0,0,0,0b100,0b100,0,0,0,0b10],
        [0,0,0,0b11,0b11,0,0,0,0b10],[0,0,0,0b111,0b111,0,0,0,0b10],[1,0b10,0b111,0b111,0b10,0b101,0b101,0b10,0b100,0b100,0b10],
        [0b100,0b100,0b110,0b11,0b11,0b1001,0b1000,1,0b110,0b10],
        [0b11,0b111,0b1100,0b100,0b101,0b11,0b11,0b111,0b111,0b1100,0b1100,0b100,0b100,0b101,0b10],
        [0,0b1011,0b1011,0b1010,0,0b1011,0b1011,0b1010,0b1111,0b101,0b10]]
lllO = [[0]*0b101,[0]*0b101,[0]*0b101,[0]*0b101,[0b1100,0,0,0,0.5],[0b1101,0,0,0,0.7],[0b1110,0,0,0.5,0.8],[0b1111,0.1,0,0.9,0.4],
        [0b1100,0,0,0,0.5],[0b1101,0,0,0,0.7],[0b1110,0,0,0.5,0.8],[0b1111,0.1,0,0,0.8],[0]*0b101+[0b111],[0]*0b101,[0b1000,0,0,0.9,0.7],
        [0b1001,0,0,0.9,0.7],[0b1010,0,0,0.9,0.7],[0b1011,0,0,0.9,0.7],[0b1000,0,0.1,0.9,0.7],[0b1001,0,0.3,0.9,0.7],[0b1010,0,0.5,0.9,0.7],
        [0b1011,0,0.7,0,0.7],[0]*0b101+[0b110],[0]*0b101,[0b100,0,0,0.9,0.8],[0b101,0,0,0.9,0.9],[6,0,0,0.9,0.9],[0b111,0,0,0.9,0.7],
        [0,0,0.5,0.9,0.8],[1,0,0,0.9,0.9],[0b10,0,0.8,0.9,0.9],[0b11,0.2,0,0,0.7],[0]*0b101,[0]*0b101,[0b10000,0,0.9,0.9,0.8],
        [0b10001,0.15,0,0.9,0.9],[0b10010,0,0,0.9,0.9],[0b10011,0,0,0.9,0.7]]
llll = [[0b1100,0,0.7],[0b1100,0,1],[0b1100,0,1],[0b1100,0,1],[0b1101,0,1],[0b1101,0,1],[0b1000,0,1,0b111],[0b1000,0.9,1],[0b1000,0.9,1],
        [0b1000,0.9,1],[0b1000,0,1],[0b100,0,1,0b110],[0b100,0,1],[0b101,0,1],[0b110,0,1],[0b111,0,1],[0b10010,0,1],[0]*0b11,[0b10011,0.8,1]]
define :llOO do |lO|
  lO.each do |ll| llO([[lOOO[ll][0],lOOO[ll][1],1]],1) end
end
define :llOl do |lO|
  ll = []
  lO.each { |x| ll += (lOOl.slice(lOlO[x][0],lOlO[x][1])) }
  return ll
end
in_thread do
  for lll in llll do
      if lll.length() == 0b100 then l = lll[0b11] end
      with_bpm l do
  with_fx :echo, mix: lll[1], amp: lll[0b10] do llOO(llOl(lOll[lll[0]])) end end end end
  in_thread do
    for lll in lllO do
        if lll.length() == 0b110 then l = lll[0b101] end
        with_bpm l*0b10 do
          with_fx :gverb, mix: lll[1] do with_fx :flanger, mix: lll[0b10] do with_fx :echo, mix: lll[0b11], amp: lll[0b100] do
    llOO(llOl(lOll[lll[0]])) end end end end end end
